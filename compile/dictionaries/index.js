const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');
const rimraf = require('rimraf');
const XLSX = require('xlsx');
const mxy = require('../mxy');
const metallo = require('../metallo');

/* 
  –§–∞–π–ª—ã —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ `src/dictionaries`.
  –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω json —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
  –∏ —Ä–∞–∑–º–µ—â–µ–Ω –≤ `src/js/config/dictionaries`.

  –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –∫–ª—é—á—ë–º, –≤—Ç–æ—Ä–æ–π - –∑–Ω–∞—á–µ–Ω–∏–µ–º.
  –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
  –°—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–µ—Ä–≤–æ–π/–≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
  –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∞–π–ª–∞ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω json.
*/

function isXlsx(file) {
  return /.+\.xlsx$/ui.test(file);
}

function onError(error) {
  mxy.error(error);
}

function checkDirectory(where) {
  return fs.mkdir(path.dirname(where), { recursive: true });
}

function writeFile(where, what) {
  return fs.writeFile(where, what).then(() => Promise.resolve(where));
}

function tryWriteFile({ name, data }) {
  // console.log(name, data);
  const where = `${__dirname}/temp/${name}.json`;
  return checkDirectory(where)
    .then(() => writeFile(where, data))
    .catch(onError);
}

function logProcessMessage() {
  console.log(`${chalk.yellow('üñ•Ô∏è  processing dictionaries\n')}`);
}

function logProcessSuccess(start, request) {
  const message = request ? request.replace(',', ', ') : 'all dictionaries';
  console.log(`${chalk.yellow('üñ•Ô∏è  success:')} ${chalk.bgYellow(` ${chalk.black(`${message} ‚Äì ${process.hrtime(start)[0]}s`)} `)}\n`);
  mxy.notify('dictionaries successfully processed', message);
}

/* –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π */
function getInitialFile(pathName) {
  const data = XLSX.readFile(`${metallo.getPath('dictionaries').from}/${pathName}`, { type: 'buffer', encoding: 'utf-8' });
  return { name: pathName.replace('.xlsx', ''), data };
}

function findInitialFiles(items) {
  const files = items.filter(isXlsx).map(getInitialFile);
  return Promise.all(files);
}

function findInitialDictionaries() {
  return fs.readdir(metallo.getPath('dictionaries').from).then(findInitialFiles);
}
/* END –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π */

/* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤ Json-—Å—Ç—Ä–æ–∫—É */
function parseDictionaryToJson({ data, ...rest }) {
  const dictionaryJson = {};

  for (let i = 0; i < data.SheetNames.length; i++) {
    const tableData = XLSX.utils.sheet_to_json(data.Sheets[data.SheetNames[i]], { header: ['key', 'value'] });

    tableData.forEach(({key, value}) => {
      if (key && value) {
        const name = key.trim();
        const val = value.trim();

        dictionaryJson[name] = val;
      }
    })
  }

  return { ...rest, data: JSON.stringify(dictionaryJson, null, 2) }
}

function parseDictionariesToJson(dictionaries) {
  const items = dictionaries.map(parseDictionaryToJson);
  return Promise.resolve(items);
}
/* END –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤ Json-—Å—Ç—Ä–æ–∫—É */

/* –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö json-—Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ */
function copyJsonFile(path) {
  const paths = path.split('/');
  const fileName = paths[paths.length - 1];
  const where = `${metallo.getPath('dictionaries').include}/${fileName}`;

  return checkDirectory(where).then(() => fs.copyFile(path, where));
}

function moveJsonDictionariesToSources(paths) {
  const moved = paths.map(copyJsonFile);

  return Promise.all(moved)
}

function removeTempFolder() {
  return new Promise((resolve) => {
    rimraf(`${__dirname}/temp`, resolve);
  });
}
/* END –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö json-—Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ */

function saveJsonDictionaries(files) {
  const saves = files.map(tryWriteFile);
  return Promise.all(saves)
    .then(moveJsonDictionariesToSources)
    .then(removeTempFolder);
}

function processDictionaries() {
  const start = process.hrtime();
  logProcessMessage();

  return findInitialDictionaries()
    .then(parseDictionariesToJson)
    .then(saveJsonDictionaries)
    .then(() => logProcessSuccess(start))
    .catch(onError);
}

processDictionaries();
